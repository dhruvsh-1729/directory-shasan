// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Contact {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  status          String?
  address         String?
  suburb          String?
  city            String?
  pincode         String?
  state           String?
  country         String?
  category        String?
  officeAddress   String?
  address2        String?
  isMainContact   Boolean  @default(true)
  parentContactId String?  @db.ObjectId
  duplicateGroup  String?
  alternateNames  String[]
  tags            String[]
  notes           String?
  lastUpdated     DateTime @default(now())
  createdAt       DateTime @default(now())

  // Embedded documents
  phones        Phone[]
  emails        Email[]
  relationships ContactRelationship[]

  // Relations
  parentContact Contact?  @relation("ContactHierarchy", fields: [parentContactId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  childContacts Contact[] @relation("ContactHierarchy")

  // Indexes for better query performance
  @@index([name])
  @@index([isMainContact])
  @@index([city, state])
  @@index([category])
  @@index([duplicateGroup])
  @@index([parentContactId])
  @@index([createdAt])
  @@index([lastUpdated])
  @@map("contacts")
}

type Phone {
  id        String
  number    String
  type      PhoneType
  isPrimary Boolean
  label     String?
  country   String?
  region    String?
  isValid   Boolean?
}

type Email {
  id        String
  address   String
  isPrimary Boolean
  isValid   Boolean?
}

type ContactRelationship {
  id               String
  contactId        String
  relatedContactId String
  relationshipType RelationshipType
  description      String?
}

enum PhoneType {
  mobile
  office
  residence
  fax
  other
}

enum RelationshipType {
  spouse
  child
  parent
  sibling
  extended_family
  grandparent
  grandchild
  in_law
  colleague
  assistant
  supervisor
  subordinate
  business_partner
  client
  friend
  neighbor
  related
}

// Import tracking model
model ImportSession {
  id               String       @id @default(auto()) @map("_id") @db.ObjectId
  fileName         String
  fileSize         Int
  status           ImportStatus
  totalRecords     Int?
  processedRecords Int?
  errorRecords     Int?
  errors           String[]
  statistics       Json?
  startedAt        DateTime     @default(now())
  completedAt      DateTime?

  @@map("import_sessions")
}

enum ImportStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

// Cache model for performance
model CacheEntry {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  key       String   @unique
  value     Json
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([expiresAt])
  @@map("cache_entries")
}
